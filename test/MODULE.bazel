bazel_dep(name = "toolchains_llvm_bootstrapped", version = "0.1.5")
#local_path_override(
#    module_name = "toolchains_llvm_bootstrapped",
#    path = "../../toolchains_llvm_bootstrapped",
#)
archive_override(
    module_name = "toolchains_llvm_bootstrapped",
    strip_prefix = "toolchains_llvm_bootstrapped-ee79305b6b01fcc4688abeaa35c7113580a1135d",
    integrity = "sha256-9IXGl6OcENEg0QrOuPQr7b+/XiFIyG9o1KcWN3pc9sE=",
    urls = ["https://github.com/cerisier/toolchains_llvm_bootstrapped/archive/ee79305b6b01fcc4688abeaa35c7113580a1135d.tar.gz"],
    patches = ["//:toolchains_llvm_bootstrapped.patch"],
    patch_strip = 1,
)
bazel_dep(name = "with_cfg.bzl", version = "0.12.0")
register_toolchains(
    "@toolchains_llvm_bootstrapped//toolchain:all",
)

bazel_dep(name = "rules_rust", version = "0.66.0")
#local_path_override(
#    module_name = "rules_rust",
#    path = "../../rules_rust",
#)

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(
    edition = "2024",
    versions = ["1.89.0"],
)
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

bazel_dep(name = "rules_rs", version = "0.0.0")
local_path_override(
    module_name = "rules_rs",
    path = "..",
)

crate = use_extension("@rules_rs//rs:extensions.bzl", "crate")

TESTS = [
    # TODO(zbarsky): Figure out how to make this work?
    # "annotation_crate_features",
    "build_script_aliases",
    "build_script_env_select",
    "build_script_runtime_env",
    "build_dep_features",
    "feature_name_overrides_implicit_dep",
    #"git_crates",
    # Got count 45796 in 20 rounds
    "many_workspace_deps",
    "multiple_versions_for_dependency",
    "optional_build_deps",
    "platform_dep_features",
    "uv",
]

[
    crate.from_cargo(
        name = test,
        cargo_lock = "//:%s/Cargo.lock" % test,
        cargo_toml = "//:%s/Cargo.toml" % test,
        # cargo_config = "//:.cargo/config.toml",
        # use_home_cargo_credentials = True,
        #debug = True,
        platform_triples = [
            "aarch64-apple-darwin",
            "x86_64-unknown-linux-musl",
            "aarch64-unknown-linux-musl",
        ],
    )
    for test in TESTS
]

[use_repo(crate, test) for test in TESTS]

crate.annotation(
    crate = "rustls",
    # Test for https://github.com/bazelbuild/rules_rust/issues/3626
    crate_features = ["fips"],
    repositories = ["annotation_crate_features"],
)
crate.annotation(
    # Smoketest that we do something reasonable with this attribute
    build_script_env_select = {
        "aarch64-apple-darwin": '{"OS": "darwin"}',
        "x86_64-unknown-linux-musl": '{"OS": "linux"}',
    },
    crate = "bitflags",
    repositories = ["build_script_env_select"],
)
crate.annotation(
    crate = "tokenizers",
    workspace_cargo_toml = "tokenizers/Cargo.toml",
)

# Workaround not parsing `members = ["crates/*"]` yet.
[
    crate.annotation(
        crate = member,
        strip_prefix = "crates/" + member,
    )
    for member in [
        "uv",
        "uv-performance-memory-allocator",
    ]
]
